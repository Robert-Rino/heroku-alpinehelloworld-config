name: deploy-app
on:
  workflow_dispatch:
    inputs:
      image-name:
        descriptino: image to daploy
        default: ghcr.io/robert-rino/heroku-alpinehelloworld
        required: true
      environment: 
        description: deploy environment
        required: false
        default: production
      image-tag:
        required: false
        default: latest
      deployment-id:
        required: false
        default: null
    secrets:
      token:
        required: true
    # TODO: on push

env:
  GKE_CLUSTER: nino-playground
  GKE_ZONE: asia-east1-a	   

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./kustomization

    steps:
    - name: Mark deployment in_progress
      uses: actions/github-script@v5
      with:
        script: |
          if (context.payload.inputs['deployment-id'] != null){
            let [owner, repo] = context.payload.repository.full_name.split('/')
            let parts = repo.split('-')
            let original_repo = parts.slice(0, -1).join('-')
            console.log(owner, repo, original_repo)

            github.rest.repos.createDeploymentStatus({
              owner: owner,
              repo: original_repo,
              deployment_id: context.payload.inputs['deployment-id'],
              state: 'in_progress',
            })

          }

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: swag-nino-chang

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -Lo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v4.4.1/kustomize_4.4.1_linux_amd64
        chmod u+x ./kustomize
        export PATH=$PATH:$($pwd)
        echo $PATH

    - name: Generate deployment.yaml
      run: |-
        kustomize edit set image IMAGE:TAG=${{ github.event.inputs.image-name}}:${{ github.event.inputs.image-tag}}
        kustomize edit add configmap k8s-helloworld-configmap --from-literal=version=${{github.event.inputs.image-tag}} --disableNameSuffixHash
        kustomize build . -o ../k8s-template/001_deployment.yaml

    - name: Commit report
      run: |
        git config --global user.name 'Rino' 
        git config --global user.email 'a901002666@gmail.com'
        git add ../k8s-template/001_deployment.yaml
        git commit -m '[automated commit] Update deploy yaml'
        git push

    - name: Deploy to k8s
      run: |-
        kubectl apply -f ../k8s-template/001_deployment.yaml
        kubectl get services -o wide

    - name: Mark deployment success
      uses: actions/github-script@v5
      with:
        script: |
          if (context.payload.inputs['deployment-id'] != null){
            let [owner, repo] = context.payload.repository.full_name.split('/')
            let parts = repo.split('-')
            let original_repo = parts.slice(0, -1).join('-')
            console.log(owner, repo, original_repo)

            github.rest.repos.createDeploymentStatus({
              owner: owner,
              repo: original_repo,
              deployment_id: context.payload.inputs['deployment-id'],
              state: 'success',
            })
          }
          
      
